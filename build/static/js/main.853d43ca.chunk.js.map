{"version":3,"sources":["components/Searchbar/Searchbar.js","components/Weather/Weather.js","components/WeekWeather/WeekWeather.js","components/Loader/Loader.js","api/weather-api.js","App.js","index.js"],"names":["Searchbar","onSubmit","useState","query","setQuery","className","event","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","Weather","weather","map","dt","name","main","wind","clouds","Date","toDateString","Math","round","temp","feels_like","id","icon","description","src","alt","all","humidity","speed","WeekWeather","weekWeather","lat","lon","daily","wind_speed","morn","day","eve","night","App","color","height","width","timeout","Component","fetchWeather","a","searchQuery","fetch","response","json","fetchWeekWeather","setWeather","setWeekWeather","setSearchQuery","setLat","setLon","isLoading","setIsLoading","error","setError","useEffect","options","weatherApi","coord","Error","data","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.853d43ca.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Searchbar.css';\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  // useState\r\n  const [query, setQuery] = useState('');\r\n\r\n  // Function\r\n  const handleChange = event => {\r\n    setQuery(event.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    //  передача  props onSubmit из App.js для обработки действий когда будет изменяться query\r\n    onSubmit(query);\r\n\r\n    //   обновление input\r\n    setQuery('');\r\n  };\r\n\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Enter your location\"\r\n          value={query}\r\n          onChange={handleChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nimport './Weather.css';\r\n\r\nexport default function Weather({ weather }) {\r\n  return (\r\n    <>\r\n      <div className=\"current-weather-wrap\">\r\n        <ul className=\"weather-list\">\r\n          {weather.map(({ dt, name, main, weather, wind, clouds }) => (\r\n            <li key={name}>\r\n              <h2>Current weather</h2>\r\n              <p>{new Date(dt * 1000).toDateString()}</p>\r\n              <p>location: {name}</p>\r\n              <p>\r\n                {Math.round(main.temp)}°C / feels like{' '}\r\n                {Math.round(main.feels_like)}°C\r\n              </p>\r\n\r\n              {weather.map(({ id, icon, description }) => (\r\n                <div key={id}>\r\n                  <img\r\n                    src={`https://openweathermap.org/img/wn/${icon}.png`}\r\n                    alt=\"icon\"\r\n                  />\r\n                  <p>{description}</p>\r\n                </div>\r\n              ))}\r\n\r\n              <p>cloudiness: {clouds.all}%</p>\r\n              <p>humidity: {main.humidity}%</p>\r\n              <p>wind speed: {wind.speed}m/s</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './WeekWeather.css';\r\n\r\nexport default function WeekWeather({ weekWeather }) {\r\n  return (\r\n    <>\r\n      {weekWeather.map(({ lat, lon, daily }) => (\r\n        <div key={lat} className>\r\n          <h2 className=\"week-weather-title\">Week Weather</h2>\r\n          <p>\r\n            lat: {lat} / lon: {lon}\r\n          </p>\r\n\r\n          <ul className=\"week-weather-gallery\">\r\n            {daily.map(\r\n              ({ dt, temp, feels_like, clouds, humidity, wind_speed }) => (\r\n                <li key={dt} className=\"week-weather-item\">\r\n                  <p>{new Date(dt * 1000).toDateString()}</p>\r\n                  <p>\r\n                    Morning {Math.round(temp.morn)}°C / Feels like{' '}\r\n                    {Math.round(feels_like.morn)}°C\r\n                  </p>\r\n\r\n                  <p>\r\n                    Day {Math.round(temp.day)}°C / Feels like{' '}\r\n                    {Math.round(feels_like.day)}°C\r\n                  </p>\r\n\r\n                  <p>\r\n                    Evening {Math.round(temp.eve)}°C / Feels like{' '}\r\n                    {Math.round(feels_like.eve)}°C\r\n                  </p>\r\n\r\n                  <p>\r\n                    Night {Math.round(temp.night)}°C / Feels like{' '}\r\n                    {Math.round(feels_like.night)}°C\r\n                  </p>\r\n\r\n                  <p>Cloudiness: {clouds}%</p>\r\n                  <p>Humidity: {humidity}%</p>\r\n                  <p>Wind speed: {wind_speed}m/s</p>\r\n                </li>\r\n              ),\r\n            )}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default class App extends Component {\r\n  //other logic\r\n  render() {\r\n    return (\r\n      <Loader\r\n        type=\"Circles\"\r\n        color=\"#ffffff\" //#3f51b5\r\n        height={40}\r\n        width={40}\r\n        timeout={2000} //2 secs\r\n      />\r\n    );\r\n  }\r\n}\r\n","// const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\nconst fetchWeather = async ({ searchQuery = '' }) => {\r\n  try {\r\n    const api_key = '22301d37d5f356a26164cebb551f003e';\r\n    const response = await fetch(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=${searchQuery}&units=metric&appid=${api_key}`,\r\n    );\r\n    const weather = response.json();\r\n    // console.log(weather);\r\n    return weather;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst fetchWeekWeather = async ({ lon = '', lat = '' }) => {\r\n  try {\r\n    const api_key = '22301d37d5f356a26164cebb551f003e';\r\n    const response = await fetch(\r\n      `http:///api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely&units=metric&appid=${api_key}`,\r\n    );\r\n    const weekWeather = response.json();\r\n    return weekWeather;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { fetchWeather, fetchWeekWeather };\r\n","import React, { useState, useEffect } from 'react';\n\n// Components\nimport Searchbar from './components/Searchbar';\nimport Weather from './components/Weather';\nimport WeekWeather from './components/WeekWeather';\nimport Loader from './components/Loader';\n\n// API\nimport weatherApi from './api/weather-api';\n\nexport default function App() {\n  const [weather, setWeather] = useState([]);\n  const [weekWeather, setWeekWeather] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('lviv');\n  const [lat, setLat] = useState('49.8383');\n  const [lon, setLon] = useState('24.0232');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchWeather();\n    fetchWeekWeather();\n    return () => setWeather([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [searchQuery, lat, lon]);\n\n  // Function\n  const fetchWeather = async () => {\n    try {\n      //   выводим в отдельную переменную  searchQuery для того, чтобы передать options в props в weather-api.js;\n      const options = { searchQuery, error };\n\n      //   сотояние загрузки, меняем значение\n      setIsLoading(true);\n\n      //проверка на то, если пользователь ничего не ввел в input, не отправлять http-запрос\n      if (!searchQuery) {\n        return;\n      }\n\n      // вызов функции из файла который прописывает логику настроек Api (weather-api.js)\n      const response = await weatherApi.fetchWeather(options);\n      const { coord } = response;\n\n      setWeather([...weather, response]);\n      // console.log(response);\n\n      setLat(coord.lat);\n      setLon(coord.lon);\n      // console.log(coord.lat);\n      // console.log(coord.lon);\n\n      if (!response) {\n        throw new Error('Something get wrong! Try again!');\n      }\n    } catch (error) {\n      setError(error);\n    }\n    setIsLoading(false);\n  };\n\n  const fetchWeekWeather = async () => {\n    try {\n      //   выводим в отдельную переменную  координаты, чтобы передать options в props в weather-api.js;\n      const options = { lat, lon };\n\n      //   сотояние загрузки, меняем значение\n      setIsLoading(true);\n\n      //проверка на то, если нет координат, не отправлять http-запрос\n      if (!lat || !lon) {\n        return;\n      }\n\n      // вызов функции из файла который прописывает логику настроек Api (weather-api.js)\n      const data = await weatherApi.fetchWeekWeather(options);\n\n      setWeekWeather([...weekWeather, data]);\n      // console.log(data);\n\n      if (!data) {\n        throw new Error('Something get wrong! Try again!');\n      }\n    } catch (error) {\n      setError(error);\n    }\n    setIsLoading(false);\n  };\n\n  // метод, который будет отрабатываться при submit формы, когда будет изменяться query\n  const changeQuery = query => {\n    setSearchQuery(query);\n    setLon('');\n    setLat('');\n    setWeather([]);\n    setWeekWeather([]);\n    setError(null);\n  };\n\n  return (\n    <>\n      {/* Searchbar. В props передаем метод, который будет отрабатываться при submit формы */}\n      <Searchbar onSubmit={changeQuery} />\n\n      <div className=\"App\">\n        {/* Loader {/* появление спиннера, рендерим по условию  */}\n        {isLoading && <Loader />}\n\n        <Weather weather={weather} />\n\n        <WeekWeather weekWeather={weekWeather} />\n\n        {/* для обработки ошибок (error) */}\n        {error && <h2 className=\"ErrorMessage\">{error.message}</h2>}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}